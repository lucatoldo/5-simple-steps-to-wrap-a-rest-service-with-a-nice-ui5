version=0.0.1
ifndef p
$(error platform flag is expected. e.g. use make -f makefile.mta p=cf)
endif
target_provided=true
ifndef t
t="$(CURDIR)"
target_provided=false
endif
ifndef strict
strict=true
endif
ifndef mtar
mtar="*"
endif
modules := $(shell mbt provide modules -d=dev)
modules := $(subst ],,$(subst [,,$(modules)))
# List of all the recipes to be executed during the build process
.PHONY: all pre_validate pre_build validate $(modules) post_build meta mtar cleanup
# Default target compile all
all: pre_validate pre_build validate $(modules) post_build meta mtar cleanup
cores:
# Determine OS cores
	NPROCS = $(sysctl -n hw.ncpu)
	MAKEFLAGS += -j
# Validate mta.yaml
pre_validate:
	@mbt validate -r=${strict} -e="paths"
pre_build: pre_validate
	@mbt project build -p=pre


# Execute module build
define build_rule
$(1): validate
	@mbt module build -m=$(1) -p=${p} -t=${t}
endef

$(foreach mod,$(modules),$(eval $(call build_rule,$(mod))))# Create META-INF folder with MANIFEST.MF & mtad.yaml
meta: $(modules) post_build
	@mbt gen meta -p=${p} -t=${t}

post_build: $(modules)
	@mbt project build -p=post

# Validate mta.yaml
validate: pre_build
	@mbt validate -r=${strict}

# Pack as MTAR artifact
mtar: $(modules) meta
	@mbt gen mtar -t=${t} --mtar=${mtar} --target_provided=${target_provided}

cleanup: mtar
# Remove tmp folder
	@mbt clean -t=${t}